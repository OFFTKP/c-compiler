DEF(LEX, 1, "-l", "--lex", "Run the lexer on a file",
    // TODO: make lexer action and preprocessor handle multiple files
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        std::vector<Token> tokens;
        Preprocessor preprocessor(src);
        src = preprocessor.Process();
        Lexer lexer(src);
        TokenType cur_token = TokenType::Empty;
        while (cur_token != TokenType::Eof) {
            auto [temptoken, name] = lexer.GetNextTokenType();
            tokens.push_back({temptoken, name});
            cur_token = temptoken;
        }
        std::cout << tokens << std::endl;
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(PREPROCESS, 1, "-p", "--preprocess", "Run the preprocessor on a file",
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        Preprocessor preprocessor(src);
        src = preprocessor.Process();
        std::cout << src << std::endl;
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(VERSION, 0, "-v", "--version", "Display the version",
    std::cout << CompilerName << " by " << CompilerAuthor << std::endl;
    std::cout << "Version: " << CompilerVersion << std::endl;
)
DEF(DUMP_DEFINES, 0, "-dd", "--dump-defines", "Dump preprocessor defines of the last processed file",
    Preprocessor::dumpDefines();
)
DEF(HELP, 0, "-h", "--help", "Displays this dialog",
    Global::showHelp();
)