DEF(LEX, 1, "-l", "--lex",
    // TODO: make lexer action and preprocessor handle multiple files
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        std::vector<std::tuple<Token, std::string>> tokens;
        Preprocessor preprocessor(src, cur);
        src = preprocessor.Process();
        Lexer lexer(src);
        Token cur_token = Token::Empty;
        while (cur_token != Token::Eof) {
            auto [temptoken, name] = lexer.GetNextToken();
            tokens.push_back({temptoken, name});
            cur_token = temptoken;
        }
        for (auto& [type, name] : tokens) {
            std::cout << name << ", " << type << std::endl;
        }
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(PREPROCESS, 1, "-p", "--preprocess",
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        Preprocessor preprocessor(src, cur);
        src = preprocessor.Process();
        std::cout << src << std::endl;
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(VERSION, 0, "-v", "--version",
    std::cout << CompilerName << " by " << CompilerAuthor << std::endl;
    std::cout << "Version: " << CompilerVersion << std::endl;
)
DEF(DUMP_ERRORS, 0, "-de", "--dump-errors",
    Variables::dumpErrors();
)
DEF(DUMP_WARNINGS, 0, "-dw", "--dump-warnings",
    Variables::dumpWarnings();
)
DEF(DUMP_LOG, 0, "-dl", "--dump-log",
    Variables::dumpLog();
)
DEF(DUMP_DEFINES, 0, "-dd", "--dump-defines",
    Preprocessor::dumpDefines();
)
DEF(ASK_ARGS, 0, "-TODO", "--TODO", exit(1);)