DEF(LEX, 1, "-l", "--lex", "Run the lexer on a file",
    // TODO: make lexer action and preprocessor handle multiple files
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        std::vector<Token> tokens;
        Preprocessor preprocessor(src);
        src = preprocessor.Process();
        Lexer lexer(src);
        TokenType cur_token = TokenType::Empty;
        while (cur_token != TokenType::Eof) {
            auto [temptoken, name] = lexer.GetNextTokenType();
            tokens.push_back({temptoken, name});
            cur_token = temptoken;
        }
        ss() << tokens << std::endl;
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(PREPROCESS, 1, "-p", "--preprocess", "Run the preprocessor on a file",
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        Preprocessor preprocessor(src);
        src = preprocessor.Process();
        ss() << src << std::endl;
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(PARSE, 1, "-y", "--parse", "Run the parser on a file",
    auto cur = args_[0];
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        Parser parser(src);
        parser.Parse();
        ss() << parser.GetUML() << std::endl;
    } else {
        ERROR("File not found: " << cur);
    }
)
DEF(VERSION, 0, "-v", "--version", "Display the version",
    ss() << CompilerName << " by " << CompilerAuthor << std::endl;
    ss() << "Version: " << CompilerVersion << std::endl;
)
DEF(DUMP_DEFINES, 0, "-dd", "--dump-defines", "Dump preprocessor defines of the last processed file",
    Preprocessor::dumpDefines();
)
DEF(HELP, 0, "-h", "--help", "Displays this dialog",
    Global::showHelp();
)
DEF(OUTPUT_DIR, 1, "-od", "--output-dir", "Set the output directory",
    Global::GetOutputPath() = args_[0];
)
DEF(COPY_TO_CLIPBOARD, 1, "-c", "--copy", "Copy the output to the clipboard",
    Global::GetCopyOutputToClipboard() = true;
)

DEF(PLACEHOLDER, 0, "-x", "--placeholder", "Placeholder",
    auto cur = "/home/offtkp/parseme.c";
    if (std::filesystem::is_regular_file(cur)) {
        std::ifstream ifs(cur);
        std::stringstream ssrc;
        ssrc << ifs.rdbuf();
        std::string src = ssrc.str();
        Parser parser(src);
        try {
            parser.is_block_item();
        } catch (...) {
            parser.find_error();
        }
    } else {
        ERROR("File not found: " << cur);
    }
)